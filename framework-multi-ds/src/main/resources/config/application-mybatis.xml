<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
       default-lazy-init="true">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${dataSource.write.url}" />
        <property name="username" value="${dataSource.write.username}" />
        <property name="password" value="${dataSource.write.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${dataSource.write.initialSize}" />
        <property name="minIdle" value="${dataSource.write.minIdle}" />
        <property name="maxActive" value="${dataSource.write.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${dataSource.write.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.write.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${dataSource.write.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${dataSource.write.validationQuery}" />
        <property name="testWhileIdle" value="${dataSource.write.testWhileIdle}" />
        <property name="testOnBorrow" value="${dataSource.write.testOnBorrow}" />
        <property name="testOnReturn" value="${dataSource.write.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${dataSource.write.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.write.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${dataSource.write.filters}" />
    </bean>

    <bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${dataSource.read.url}" />
        <property name="username" value="${dataSource.read.username}" />
        <property name="password" value="${dataSource.read.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${dataSource.read.initialSize}" />
        <property name="minIdle" value="${dataSource.read.minIdle}" />
        <property name="maxActive" value="${dataSource.read.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${dataSource.read.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.read.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${dataSource.read.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${dataSource.read.validationQuery}" />
        <property name="testWhileIdle" value="${dataSource.read.testWhileIdle}" />
        <property name="testOnBorrow" value="${dataSource.read.testOnBorrow}" />
        <property name="testOnReturn" value="${dataSource.read.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${dataSource.read.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.read.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${dataSource.read.filters}" />
    </bean>

    <!-- 代理数据源 用来实现读写分离(也可实现数据库集群)  -->
    <bean id="dataSource" class="com.qihai.commerce.framework.datasource.DynamicDataSource">
        <property name="slavesDataSource">
            <list>
                <ref bean="slaveDataSource"/>
            </list>
        </property>
        <property name="masterDataSource" ref="masterDataSource"/>
    </bean>

   <!--  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="${mybatis.spring.config.location}" />
        <property name="mapperLocations" value="${mybatis.spring.mapper.locations}"/>
    </bean> -->
    
    <!-- Spring整合Mybatis，更多查看文档：http://mp.baomidou.com -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="${mybatis.spring.config.location}"/>
        <!-- 自动扫描Mapping.xml文件 -->
        <property name="mapperLocations" value="${mybatis.spring.mapper.locations}"/>
        <!-- 全局配置注入 -->
	    <property name="globalConfig" ref="globalConfig" />
	</bean>
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
	    <!--
			AUTO->`0`("数据库ID自增")
		 	INPUT->`1`(用户输入ID")
			ID_WORKER->`2`("全局唯一ID")
			UUID->`3`("全局唯一ID")
		-->
	    <property name="idType" value="2" />
		<!--
			MYSQL->`mysql`
			ORACLE->`oracle`
			DB2->`db2`
			H2->`h2`
			HSQL->`hsql`
			SQLITE->`sqlite`
			POSTGRE->`postgresql`
			SQLSERVER2005->`sqlserver2005`
			SQLSERVER->`sqlserver`
		-->
		<!-- Oracle需要添加该项 -->
	    <!-- <property name="dbType" value="oracle" /> -->
	    <!-- 全局表为下划线命名设置 true -->
	    <property name="dbColumnUnderline" value="true" />
	</bean>

	<!-- <bean id="transactionManager"
		class="com.qihai.commerce.framework.datasource.manager.DynamicDataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	
	<!-- 以 @Transactional 标注来定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="com.qihai.**.dao;com.qihai.**.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean> -->
</beans>